task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
    from sourceSets.main.kotlin.srcDirs
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                from components.java

                artifact sourcesJar
                artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Open Ai API for Java and Kotlin'
                    url = 'https://github.com/iAmSauravSharan/OpenAiChatGpt'

                    developers {
                        developer {
                            id = 'iAmSauravSharan'
                            name = 'Saurav Sharan'
                            email = 'iamsauravsharan@gmail.com'
                        }
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/iAmSauravSharan/OpenAiChatGpt.git'
                        developerConnection = 'scm:git:ssh://github.com/iAmSauravSharan/OpenAiChatGpt.git'
                        url = 'https://github.com/iAmSauravSharan/OpenAiChatGpt/tree/main'
                    }
                }
            }
        }
    }
}

signing {
    File secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        useInMemoryPgpKeys(
                properties.getProperty("signing.keyId"),
                properties.getProperty("signing.key"),
                properties.getProperty("signing.password"),
        )
        sign publishing.publications
    }
}